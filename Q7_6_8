// write a c++ code to check a graph is complete. represent the graph using adjacency list
#include <iostream>
#include <vector>
using namespace std;
// Number of vertices in the graph
    int V = 5;

void addEdge(vector<int> adj[], int u, int v) {
    adj[u].push_back(v);
    adj[v].push_back(u);
}

void printGraph(vector<int> adj[], int V) {
    for (int v = 0; v < V; v++) {
        cout << "Adjacency list of vertex " << v ;
        
        for (int edge : adj[v]) {
            cout << " -> " << edge;
        }
        cout<<endl;
    }
}

bool isGraphComplete(vector<int> adj[], int V) {
    for (int v = 0; v < V; v++) {
        if (adj[v].size() != V - 1) {
            return false;
        }
    }
    return true;
}

int main() {
    

    // Create an array of vectors to represent the graph
    vector<int> adj[V];

    // Adding edges to the graph
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 4);
    addEdge(adj, 1, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 4);
    addEdge(adj, 2, 3);
    addEdge(adj, 3, 4);

    // Print the adjacency list
    printGraph(adj, V);
    if(isGraphComplete(adj,V)){
        cout<<"Graph is complete";
    }
    else{
        cout<<"Graph is not complete";
    }

    return 0;
}
int main(){
    int n = 4;
    vector<vector<int>> adjList(n, vector<int>(n, 0));

    adjList[0][1] = 1;
    adjList[0][2] = 1;
    adjList[0][3] = 1;
    adjList[1][2] = 1;
    adjList[1][3] = 1;
    adjList[2][3] = 1;

    if (isComplete(adjList, n)){
        cout << "The graph is complete." << endl;
        }
    else
    {
        cout << "The graph is not complete." << endl;
    }
    return 0;
}

// Q6

#include <iostream>
using namespace std;
int main(){
    int rows,columns, a1[10][10];
    cout<<"Enter rows ";
    cin>>rows;
    cout<<"Enter columns ";
    cin>>columns;
    for(int i=0;i<rows;i++){
        for(int j=0;j<columns;j++){
            cin>>a1[i][j];
        }
        cout<<endl;    
    }
     for(int i=0;i<rows;i++){
        for(int j=0;j<columns;j++){
            cout<<a1[i][j];
        }
        cout<<endl;  
    }
    bool iscomplete = true;
    for(int i=0;i<rows;i++){
        for(int j=0;j<columns;j++){
            if(i!=j && a1[i][j] != 1){
                iscomplete = false;
                break;
            }
        }
        if(!iscomplete){
            break;
        }
    }
    if(iscomplete){
        cout<<"The graph is complete";
    }
    else{
        cout<<"The graph is not complete";
    }   
    return 0;
}


// Q8 directed graph
#include <iostream>
using namespace std;

void calculateDegrees(int a[10][10], int m, int n) {
    int inDegree[10] = {0};
    int outDegree[10] = {0};

    // Calculate in-degree and out-degree for each vertex
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (a[i][j] == 1) {
                outDegree[i]++;
                inDegree[j]++;
            }
        }
    }

    // Print the in-degree and out-degree for each vertex
    cout << "Vertex\tIn-Degree\tOut-Degree" << endl;
    for (int i = 0; i < m; i++) {
        cout << i << "\t" << inDegree[i] << "\t\t" << outDegree[i] << endl;
    }
}

int main() {
    int m, n, a1[10][10];
    cout << "Enter the number of rows: ";
    cin >> m;
    cout << "Enter the number of columns: ";
    cin >> n;

    // Read the adjacency matrix
    cout << "Enter the adjacency matrix:" << endl;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cin >> a1[i][j];
        }
        cout << endl;
    }

    // Print the adjacency matrix
    cout << "Adjacency matrix:" << endl;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cout << a1[i][j] << " ";
        }
        cout << endl;
    }


